printp printa の追加

:qと入力されたら終了する

. と -> の処理を分ける

-> が正しく動くか確認

if while 処理の追加
- < の追加
- if の追加
(if (< 3 5) 1 0)
(if (< 5 3) 1 0)
- whileの追加
(define $i 1)
(while (< $i 10) (printp cp) (define $i (+ $i 1)))

= の追加

define の頭文字を$に限定する

ifdefでptrace処理を消せるようにする

evalのSYM処理の中でread_memを呼んでたが
GVAR処理でread_memを呼ぶように修正する
- topの場合
- topの中身が出力されるべき
- topはシンボル
- (define $task top)の場合
- $taskにはtop自体のアドレスが格納されるベき
- もしくは$taskと入力した時は

- 入力：GVAR名のみ
- 出力：GVARのアドレス
- 入力：(print** GVAR)
- 出力：GVARの中身

現在の問題
(define $task ggg)を実行するとgggが評価された値が$taskに格納される
$taskを実行するともう一度評価されてしまい値がおかしくなる




====

print-string追加

(deref (-> (-> (-> top next) next) next))

(define $task top)
(-> $task val)
(deref (-> $task next))
(define $task (-> $task next))

(define $task ggg)
